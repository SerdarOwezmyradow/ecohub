// src/components/TurkmenistanMap.js

import React, { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Polygon } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import Divider from './Divider';
import { NavLink } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import MapContent from './MapContent';
import baseUrl from '../baseUrl';
import axiosInstance from '../axios';

const TurkmenistanMap = () => {
    const { t, i18n } = useTranslation();

    const [cats, setCats] = useState(null)
    const [selectedId, setSelectedId] = useState(null)
    const [show, setShow] = useState(false)


    // const baseUrl = `http://216.250.11.159:8080/`
    const getCats = async (id) => {
        try {
            // isLoading(true)

            const response = await axiosInstance.get(`${baseUrl}api/category/${id}`);


            console.log('selected response', response.data);
            setCats(response?.data)
            // isLoading(false)

        } catch (error) {
            console.error('Error fetching categories:', error);
        }
    }
    useEffect(() => {
        if (selectedId) {
            getCats(selectedId)
        }

    }, [i18n.language])

    const selectId = (id) => {
        setShow(true)
        getCats(id)
        setSelectedId(id)
        console.log('e.target.value', id);
    }

    return (
        <div className='container  flex text-center items-center'>
            <div className='w-8/12 mx-auto'>
                <div className='flex items-center my-10 gap-3'>
                    <NavLink to={`/`} className=' text-[#CFCFCF] hover:text-[#5E5E5E] text-nowrap cursor-pointer'>{t('key')}</NavLink>
                    <svg xmlns="http://www.w3.org/2000/svg" width="9" height="15" viewBox="0 0 9 15" fill="none">
                        <path d="M1 1L7 7.5L1 14" stroke="#CFCFCF" stroke-width="1.5" />
                    </svg>
                    <div className=' text-[#CFCFCF]'>{t('map')}</div>
                </div>

                <div className=' flex w-full items-center gap-5 '>
                    <div className='wrap  text-goldColor font-[500] text-[25px]'>{t('map')}</div>
                    <Divider showright={true} className='mt-5' />

                </div>

                <div className='mt-32 relative '>

                    <svg xmlns="http://www.w3.org/2000/svg" className='w-full mx-auto' viewBox="0 0 726 506" fill="none">
                        {/* <defs> */}

                        <path onClick={() => selectId(36)} className={`hover:fill-[#E1E1E1] ${selectedId == 36 && 'fill-[#E1E1E1]'}  cursor-pointer`} d="M631.588 401.163L629.759 404.416C629.487 404.895 629.266 405.4 629.1 405.925L623.463 423.443C623.097 424.593 622.48 425.646 621.655 426.526L598.258 451.337C597.299 452.325 596.107 453.057 594.791 453.463L553.208 466.644C552.167 466.974 551.203 467.511 550.374 468.222C549.545 468.933 548.868 469.804 548.384 470.782C547.9 471.76 547.617 472.826 547.554 473.916C547.491 475.006 547.649 476.097 548.018 477.125C548.58 478.689 548.65 480.387 548.216 481.992C547.782 483.596 546.867 485.029 545.593 486.097L525.237 503.105C524.091 504.064 522.702 504.689 521.223 504.91C519.745 505.132 518.234 504.941 516.857 504.359L496.522 495.855C495.361 495.366 494.101 495.155 492.843 495.239L480.804 495.983C479.139 496.073 477.485 495.658 476.06 494.792L461.384 485.842L472.317 458.565H464.043V416.959L459.108 381.71L433.18 371.633V341.762L436.498 335.257L408.166 286.571L417.355 280.576L422.587 259.571L434.052 252.81V238.375L449.515 238.056L527.811 317.356L547.528 324.265L577.307 357.048L563.566 374.63V401.163H631.588Z" fill="white" stroke="#184CD3" stroke-width="2" stroke-miterlimit="10" />
                        <path onClick={() => selectId(37)} className={`hover:fill-[#E1E1E1] ${selectedId == 37 && 'fill-[#E1E1E1]'}   cursor-pointer`} d="M724.82 335.639L720.12 355.539C719.948 356.257 719.653 356.941 719.248 357.558L711.846 368.571C710.972 369.862 709.647 370.778 708.131 371.14C706.616 371.502 705.019 371.284 703.657 370.527L689.108 362.342C687.931 361.67 686.565 361.406 685.222 361.591C683.88 361.776 682.636 362.398 681.684 363.362L677.749 367.296C677.022 368.025 676.488 368.923 676.197 369.911L674.623 375.183C674.239 376.459 673.455 377.578 672.387 378.374C671.318 379.171 670.021 379.602 668.688 379.605H647.418C646.576 379.602 645.742 379.776 644.972 380.115L637.145 383.474C635.951 383.999 634.952 384.884 634.288 386.005C633.624 387.126 633.329 388.427 633.444 389.725L633.89 394.849C633.993 396.095 633.727 397.345 633.124 398.442L631.636 401.057H563.571V374.63L577.311 357.048L547.533 324.265L527.816 317.356L449.52 238.056L434.057 238.375L413.361 238.821L411.723 177.167L400.173 176.423L399.535 132.032L438.821 132.691L438.332 118.723L446.351 119.892C447.201 120.014 448.068 119.957 448.895 119.727C449.722 119.496 450.493 119.096 451.158 118.553L456.624 114.11C457.692 113.246 459.015 112.759 460.389 112.724C461.762 112.689 463.108 113.109 464.218 113.918L486.254 130.055C487.587 131.06 488.473 132.549 488.721 134.2L491.954 157.119C492.14 158.441 492.747 159.668 493.686 160.618C494.625 161.567 495.845 162.189 497.165 162.391L517.968 165.495C519.272 165.684 520.482 166.285 521.42 167.211C522.358 168.137 522.974 169.339 523.179 170.64L526.667 192.581C526.859 193.828 527.431 194.986 528.305 195.897L597.369 268.181C598.216 269.073 599.311 269.692 600.513 269.957C601.714 270.222 602.968 270.122 604.112 269.669C605.072 269.291 606.111 269.158 607.136 269.28C608.16 269.403 609.139 269.777 609.982 270.371L675.027 316.123C675.841 316.7 676.782 317.073 677.77 317.21C678.759 317.347 679.766 317.244 680.706 316.909L687.342 314.528C688.105 314.252 688.914 314.128 689.724 314.164C690.535 314.201 691.33 314.397 692.064 314.741L721.417 328.517C722.72 329.129 723.771 330.173 724.391 331.471C725.012 332.769 725.163 334.242 724.82 335.639Z" fill="white" stroke="#184CD3" stroke-width="2" stroke-miterlimit="10" />
                        <path onClick={() => selectId(38)} className={`hover:fill-[#E1E1E1]  ${selectedId == 38 && 'fill-[#E1E1E1]'}  cursor-pointer`} d="M411.74 177.082L413.378 238.736L402.87 238.97V230.657H392.426L383.089 222.578V206.718L341.08 200.893L335.38 192.155L306.154 184.502L263.21 194.175L243.046 192.453L205.695 106.052L232.985 103.713C233.943 103.629 234.83 103.171 235.452 102.438L239.345 97.8882C239.794 97.3529 240.082 96.7014 240.176 96.0091C240.27 95.3168 240.166 94.6121 239.876 93.9764L232.347 77.6061C231.966 76.7871 231.898 75.8569 232.155 74.9911L237.345 58.1957C237.52 57.5963 237.851 57.0536 238.302 56.6225L252.341 43.2074C252.952 42.6172 253.749 42.2566 254.596 42.1869L272.718 40.8263C273.509 40.7662 274.259 40.4522 274.857 39.9312C275.455 39.4101 275.868 38.7099 276.036 37.9349L278.886 24.3922C279.016 23.7382 279.326 23.1333 279.78 22.6452C280.235 22.1571 280.816 21.805 281.46 21.6284L285.714 20.3953C286.257 20.2455 286.828 20.2232 287.381 20.3301C287.935 20.4371 288.456 20.6704 288.904 21.0119L299.71 29.1545C300.296 29.6014 301.003 29.8608 301.74 29.8988C302.476 29.9367 303.207 29.7514 303.836 29.3671C304.281 29.0955 304.662 28.7321 304.955 28.3011C305.248 27.8702 305.445 27.3818 305.534 26.8685C305.622 26.3552 305.6 25.8289 305.469 25.3249C305.337 24.8208 305.1 24.3506 304.772 23.9458L295.37 12.3165C294.988 11.846 294.729 11.2879 294.616 10.6924C294.503 10.0969 294.54 9.48265 294.724 8.90498C294.907 8.32731 295.232 7.80435 295.667 7.38302C296.103 6.96169 296.637 6.6552 297.221 6.49123L316.151 1.13372C316.904 0.925282 317.702 0.961273 318.433 1.23643C319.163 1.51159 319.787 2.01166 320.214 2.66445L328.148 14.8677C328.434 15.3096 328.812 15.6846 329.256 15.9672C329.7 16.2497 330.2 16.4331 330.722 16.5048L340.506 17.8654C341.199 17.9606 341.85 18.2562 342.378 18.7158L353.864 28.538C354.298 28.9146 354.816 29.184 355.374 29.3246L381.706 35.8726C382.319 36.0218 382.882 36.3276 383.341 36.7599C383.799 37.1923 384.138 37.7364 384.322 38.3388L392.831 65.7855C392.831 65.7855 392.831 65.9556 392.831 66.0194L402.126 90.1495C402.32 90.6722 402.4 91.2305 402.36 91.7866L401.509 101.247C401.467 101.81 401.555 102.374 401.765 102.897C401.975 103.42 402.302 103.889 402.721 104.266L414.058 114.514C414.594 115.007 415.271 115.319 415.994 115.406L438.285 118.638L438.774 132.606L399.488 131.947L400.126 176.338L411.74 177.082Z" fill="white" stroke="#184CD3" stroke-width="2" stroke-miterlimit="10" />
                        <path onClick={() => selectId(35)} className={`hover:fill-[#E1E1E1]  ${selectedId == 35 && 'fill-[#E1E1E1]'}  cursor-pointer`} d="M472.32 458.565L461.473 485.799C459.038 484.311 456.953 482.316 455.36 479.95C453.767 477.583 452.703 474.901 452.241 472.086L449.136 453.229C449.136 452.74 448.987 452.272 448.944 451.783L447.604 436.773C447.163 431.833 444.889 427.237 441.228 423.889C437.567 420.54 432.785 418.683 427.823 418.681H416.486C413.074 418.694 409.716 417.829 406.735 416.168C403.755 414.507 401.253 412.107 399.47 409.199L394.663 401.163C392.509 397.634 389.303 394.868 385.495 393.254L367.394 385.579C364.832 384.49 362.528 382.874 360.63 380.838C358.732 378.802 357.283 376.39 356.376 373.759C354.912 369.526 352.065 365.909 348.294 363.49L337.318 356.474C334.147 354.434 330.455 353.349 326.683 353.349H305.413C302.332 353.333 299.297 352.605 296.543 351.223L260.575 333.343C258.506 332.318 256.634 330.937 255.045 329.261L240.475 314.146L221.098 295.139L214.143 277.408L231.967 210.248L243.155 192.453L263.319 194.175L306.264 184.502L335.489 192.155L341.189 200.893L383.198 206.782V222.578L392.536 230.593H402.98V238.991L413.487 238.757L434.183 238.311V252.746L422.718 259.507L417.486 280.512L408.297 286.507L436.523 335.257L433.204 341.762V371.633L459.133 381.71L464.068 416.959V458.565H472.32Z" fill="white" stroke="#184CD3" stroke-width="2" stroke-miterlimit="10" />
                        <path onClick={() => selectId(34)} className={`hover:fill-[#E1E1E1]  ${selectedId == 34 && 'fill-[#E1E1E1]'}  cursor-pointer`} d="M214.163 277.408L231.966 210.248L243.154 192.453L205.803 106.052L187.575 107.604H187.277L151.883 108.072C151.154 108.089 150.432 107.918 149.787 107.575C149.143 107.233 148.598 106.73 148.204 106.116L122.573 66.6997C122.278 66.2335 121.895 65.8292 121.446 65.5092L85.7544 40.4223C84.8806 39.7946 83.8014 39.5211 82.734 39.6569L34.1315 45.5247C33.1412 45.6397 32.2229 46.0987 31.5366 46.8216L2.24751 76.9471C1.61828 77.5754 1.20189 78.385 1.0569 79.2621C0.91192 80.1392 1.04563 81.0397 1.43923 81.8369L21.8161 124.357C22.1824 125.101 22.3229 125.936 22.2203 126.759L19.5828 148.615C19.5447 148.912 19.4732 149.205 19.37 149.486L10.5217 175.275C10.1809 176.23 10.1809 177.274 10.5217 178.23L18.8808 199.788C19.2528 200.805 19.9992 201.642 20.9676 202.128C21.936 202.614 23.0536 202.712 24.0921 202.403C24.8106 202.209 25.4657 201.83 25.992 201.304C26.5183 200.778 26.8972 200.123 27.0911 199.405H50.6372C51.4453 199.374 52.2455 199.574 52.9439 199.982C53.6424 200.389 54.2102 200.987 54.5807 201.706C54.9513 202.424 55.1092 203.233 55.0362 204.038C54.9631 204.843 54.6619 205.611 54.168 206.251L50.7436 211.077C50.238 211.765 49.9515 212.589 49.9211 213.442C49.8908 214.295 50.118 215.138 50.5734 215.86L57.3798 226.937C57.8783 227.72 58.1066 228.645 58.0297 229.57C57.9529 230.495 57.5752 231.37 56.9544 232.06L49.9566 240.012C49.2086 240.801 48.7918 241.847 48.7918 242.935C48.7918 244.022 49.2086 245.068 49.9566 245.858L74.9491 272.263C75.4627 272.79 75.8307 273.441 76.0171 274.153C76.2035 274.865 76.2019 275.613 76.0126 276.324L69.6315 300.943C69.5262 301.338 69.4832 301.747 69.5039 302.155L70.9928 350.755C71.0166 351.355 71.1628 351.943 71.4225 352.484C71.6823 353.026 72.05 353.508 72.5031 353.902L86.8392 366.296C87.3701 366.766 88.0101 367.096 88.7011 367.256C89.392 367.415 90.112 367.4 90.7954 367.21L119.234 359.727C119.881 359.562 120.48 359.247 120.982 358.807C121.485 358.368 121.877 357.816 122.126 357.197L130.634 336.872C130.871 336.295 131.232 335.776 131.691 335.354C132.151 334.931 132.698 334.615 133.293 334.427L169.453 322.522C170.208 322.274 171.017 322.237 171.792 322.416L188.702 326.37C189.574 326.587 190.492 326.523 191.325 326.187C192.158 325.851 192.863 325.26 193.339 324.499L198.614 316.25C199.083 315.528 199.756 314.961 200.547 314.62C201.338 314.28 202.212 314.181 203.059 314.337L231.349 319.567C231.964 319.685 232.597 319.667 233.203 319.512C233.81 319.358 234.375 319.072 234.858 318.674L240.453 314.145L221.075 295.139L214.163 277.408ZM114.618 139.026L100.707 140.536C99.9929 140.618 99.3246 140.93 98.8029 141.424C98.2812 141.919 97.9343 142.57 97.8145 143.278L96.5597 151.145C96.4509 151.82 96.1344 152.445 95.6541 152.933C95.1739 153.421 94.5537 153.747 93.8796 153.866L73.0348 157.416C72.4104 157.526 71.7674 157.452 71.1842 157.204L52.9982 149.444C52.7171 149.334 52.4247 149.255 52.1262 149.21L35.3652 147.084C34.748 147.002 34.1668 146.746 33.6887 146.347C33.2106 145.949 32.8553 145.423 32.6639 144.83L26.0276 124.4C25.9555 124.186 25.9056 123.965 25.8787 123.74L22.2627 89.4267C22.1981 88.7546 21.9259 88.1193 21.4838 87.6088C21.0417 87.0984 20.4516 86.7381 19.7954 86.5779C19.2867 86.4528 18.8155 86.2077 18.4211 85.8629C18.0268 85.5181 17.7209 85.0839 17.5292 84.5966C17.3375 84.1092 17.2656 83.583 17.3194 83.0621C17.3733 82.5413 17.5513 82.0409 17.8386 81.603L33.2595 58.0044C33.5002 57.6364 33.8126 57.3206 34.178 57.0759C34.5434 56.8311 34.9545 56.6625 35.3865 56.58L60.9108 52.2004C61.4588 52.105 62.0219 52.1489 62.5485 52.328L69.8443 54.8791C70.2756 55.0279 70.6708 55.2657 71.0043 55.577C71.3377 55.8883 71.602 56.2662 71.7798 56.6863L78.3948 72.1423C78.5048 72.4013 78.5833 72.6725 78.6288 72.9502L82.0534 95.8898C82.177 96.7302 82.6185 97.4912 83.2869 98.0158L117.468 124.485C117.921 124.835 118.274 125.298 118.491 125.828C118.708 126.358 118.78 126.936 118.702 127.503L117.532 136.263C117.422 136.981 117.076 137.643 116.549 138.143C116.021 138.644 115.342 138.955 114.618 139.026Z" fill="white" stroke="#184CD3" stroke-width="2" stroke-miterlimit="10" />
                        {/* </defs> */}
                    </svg>
                    <div onClick={() => selectId(34)} className="map-text cursor-pointer absolute top-[37%] text-black font-[500] left-[15%] lg:text-lg text-sm ">
                        {t('balkan')}
                    </div>
                    <div onClick={() => selectId(38)} className="map-text cursor-pointer absolute top-[27%] text-black font-[500] left-[37%] lg:text-lg text-sm ">
                        {t('dashoguz')}
                    </div>
                    <div onClick={() => selectId(35)} className="map-text cursor-pointer absolute top-[47%] text-black font-[500] left-[40%] lg:text-lg text-sm ">
                        {t('ahal')}

                    </div>
                    <div onClick={() => selectId(37)} className="map-text cursor-pointer absolute top-[47%] text-black font-[500] right-[23%] lg:text-lg text-sm ">
                        {t('lebap')}

                    </div>
                    <div onClick={() => selectId(36)} className="map-text cursor-pointer absolute bottom-[27%] text-black font-[500] right-[28%] lg:text-lg text-sm ">
                        {t('mary')}

                    </div>
                    <div onClick={() => selectId(39)} className="map-text cursor-pointer flex items-center gap-3 absolute bottom-[37%] text-black font-[500] right-[48%] lg:text-lg text-sm ">
                        <svg xmlns="http://www.w3.org/2000/svg" width="13" height="13" viewBox="0 0 13 13" fill="none">
                            <path d="M10.215 1.6782H2.16582C1.88069 1.6782 1.64954 1.90935 1.64954 2.19448V10.2437C1.64954 10.5288 1.88069 10.76 2.16582 10.76H10.215C10.5002 10.76 10.7313 10.5288 10.7313 10.2437V2.19448C10.7313 1.90935 10.5002 1.6782 10.215 1.6782Z" fill="black" />
                            <path d="M12.2647 5.84288L6.57306 0.151239C6.37144 -0.0503793 6.0445 -0.0504299 5.84288 0.151188L0.151188 5.84288C-0.0504299 6.0445 -0.0503793 6.37144 0.151239 6.57306L5.84288 12.2647C6.0445 12.4663 6.37134 12.4663 6.57296 12.2647L12.2647 6.57296C12.4663 6.37134 12.4663 6.0445 12.2647 5.84288Z" fill="black" />
                        </svg>
                        <span >
                            {t('asgabat')}
                        </span>
                    </div>

                </div>
                <div className='mt-20'>
                    {cats && cats?.map((cat) => {
                        return (
                            <MapContent id={selectedId} title={cat?.title} content={cat?.content} />
                        )
                    })}
                </div>
            </div>

        </div>

    );
}

export default TurkmenistanMap;
